When would you want to use a remote repository rather than keeping all your work local?
    I would prefer to use a remote repository when there are more contributors to my
    repository.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

	I would always want to pull changes manually because while working on a new feature,
	I don't want to care about the feature someone else is working on. This may even cause
	a conflict.

Describe the differences between forks, clones, and branches. When would you use one instead
of another?

	*Fork is not a git feature. It's a GitHub feature which allows a repository to be 'cloned'
	 from one GitHub user to another.
	*Clone is a git feature which allows a git repository to be copied either from a remote
	 location to a local location or from one local location to another.
	*Branch is a git feature which allows you to extend the current commit history without
	 affecting it. The current commit history will remain as it is under the original branch
	 name. This allows to try new versions of the same code with affecting the original.

What is the benefit of having a copy of the last known state of the remote stored locally?

	Having a copy of last known state of remote stored locally allows me to see changes what
	changes have been done to remote since I last synced (using git status).

How would you collaborate without using Git or GitHub? What would be easier, and what would
be harder?

	If I were to collaborate without using Git or GitHub (or any other version control in
	particular), I would have been using a shared folder on Dropbox or Google Drive.

	Saving files will be easier. Managing previous versions and collaborating on same
	code at same time would be harder as merge wouldn't be possible.

When would you want to make changes in a separate branch rather than directly in master? What
benefits does each approach have?

	I would make changes in separate branch when I am working with a large group so that I
	don't change the master branch often. This approach allows to collaborate with ease.

	When working on a small project that involves only me, I would make changes directly to
	master branch.